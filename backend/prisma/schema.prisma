generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SELLER
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String
  name           String
  phone          String         @unique
  isActive       Boolean        @default(true)
  role           UserRole       @default(CUSTOMER)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  orders         Order[]
  cartItems      Cart[]

  @@map("users")
}

model Category {
  id             String        @id @default(uuid())
  name           String
  slug           String        @unique
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  subcategories  Subcategory[]

  @@map("categories")
}

model Subcategory {
  id             String     @id @default(uuid())
  categoryId     String
  name           String
  slug           String     @unique
  description    String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  category       Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products       Product[]

  @@map("subcategories")
}

model Product {
  id               String      @id @default(uuid())
  subcategoryId    String
  name             String
  slug             String      @unique
  description      String?
  brand            String
  imageUrl         String?     
  weight           Float?
  height           Float?
  width            Float?
  depth            Float?
  price            Float
  currency         Currency    @default(PYG)
  stock            Int         @default(0)
  isActive         Boolean     @default(true)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  subcategory      Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  cartItems        Cart[]
  orderItems       OrderItem[]

  @@map("products")
}

enum Currency {
  PYG
  USD
  BRL
  EUR
  ARS
}

model Cart {
  id               String           @id @default(uuid())
  userId           String
  productId        String
  quantity         Int              @default(1)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product          Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id          String       @id @default(uuid())
  userId      String
  status      OrderStatus  @default(PENDING)
  totalAmount Float
  currency    Currency     @default(USD)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  Payment     Payment[]
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id            String       @id @default(uuid())
  orderId       String
  amount        Float
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod

  order         Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}


enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  COMPLETED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}
