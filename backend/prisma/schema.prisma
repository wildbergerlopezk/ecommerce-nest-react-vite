// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  phone     String   @unique
  isActive  Boolean  @default(true)
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SELLER
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(uuid())
  categoryId  String
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("subcategories")
}

// Product Management
model Product {
  id             String        @id @default(uuid())
  subcategoryId  String
  name           String
  slug           String        @unique
  description    String?
  brand          String
  weight         Float?
  height         Float?
  width          Float?
  depth          Float?
  price          Float
  currency       Currency       @default(PYG)       
  stock          Int           @default(0)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  // Relations
  subcategory     Subcategory     @relation(fields: [subcategoryId], references: [id])
  productVariants ProductVariant[]
  productImages   ProductImage[]
  reviews         Review[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  wishlistItems   WishlistItem[]

  @@map("products")
}

enum Currency {
  PYG   // Guaraní
  USD   // Dólar
  BRL   // Real brasileño
  EUR   // Euro
  ARS   // Peso argentino
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Product Variants
model ProductVariant {
  id             String   @id @default(uuid())
  productId      String
  name           String
  sku            String   @unique
  price          Float
  compareAtPrice Float?
  costPrice      Float?
  stock          Int      @default(0)
  weight         Float?
  barcode        String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  product               Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantDetails        ProductVariantDetail[]
  variantImages         ProductVariantImage[]
  cartItems             CartItem[]
  orderItems            OrderItem[]
  inventoryTransactions InventoryTransaction[]

  @@map("product_variants")
}

model ProductVariantDetail {
  id               String   @id @default(uuid())
  productVariantId String
  name             String
  value            String
  sortOrder        Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("product_variant_details")
}

model ProductVariantImage {
  id               String   @id @default(uuid())
  productVariantId String
  url              String
  altText          String?
  isPrimary        Boolean  @default(false)
  sortOrder        Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("product_variant_images")
}

// Inventory Management
model InventoryTransaction {
  id               String                   @id @default(uuid())
  productVariantId String
  type             InventoryTransactionType
  quantity         Int
  reason           String?
  referenceId      String?
  createdAt        DateTime                 @default(now())

  // Relations
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("inventory_transactions")
}

enum InventoryTransactionType {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
  SALE
  RETURN
}

// Shopping Cart
model CartItem {
  id               String   @id @default(uuid())
  userId           String
  productId        String
  productVariantId String?
  quantity         Int      @default(1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, productVariantId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Order Management
model Order {
  id                String        @id @default(uuid())
  userId            String
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  subtotal          Float
  taxAmount         Float         @default(0)
  shippingAmount    Float         @default(0)
  discountAmount    Float         @default(0)
  totalAmount       Float
  currency          String        @default("USD")
  paymentStatus     PaymentStatus @default(PENDING)
  shippingAddressId String
  billingAddressId  String
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  orderItems      OrderItem[]
  payments        Payment[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model OrderItem {
  id               String   @id @default(uuid())
  orderId          String
  productId        String
  productVariantId String?
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

// Payment Management
model Payment {
  id               String        @id @default(uuid())
  orderId          String
  amount           Float
  currency         String        @default("USD")
  status           PaymentStatus @default(PENDING)
  method           PaymentMethod
  transactionId    String?
  providerResponse Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

// Review System
model Review {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}
